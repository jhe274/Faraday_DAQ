import scipy.fftpack
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os

dir_path = os.path.join(os.getcwd(), 'Faraday rotation measurements')
K_vapor = os.path.join(dir_path, 'Data_acquisition')
lockin_path = os.path.join(K_vapor, 'FR_DAQ', 'FieldCrumley','Data','Lock-ins')
file = os.path.join(lockin_path, 'Faraday_lockins_2024-01-19_openhole977chopper.lvm')

def Lock_ins():
    '''
        Read lock-ins data files
    '''
    with open(file, 'r') as f:
        data = pd.read_csv(file, sep=',', header=None, skiprows=9,
                        names=['X_dc', 'Y_dc', 'X_2f', 'Y_2f', 'X_mod', 'Y_mod'])

    Xdc = data['X_dc'].to_numpy()
    Ydc = data['Y_dc'].to_numpy()
    X2f = data['X_2f'].to_numpy()
    Y2f = data['Y_2f'].to_numpy()
    Xmod = data['X_mod'].to_numpy()
    Ymod = data['Y_mod'].to_numpy()

    return Xdc, Ydc, X2f, Y2f, Xmod, Ymod

Xdc, Ydc, X2f, Y2f, Xmod, Ymod = Lock_ins()

# Convert lists to NumPy arrays
Xmod_array = np.array(Xmod)
Ymod_array = np.array(Ymod)

# Use NumPy element-wise squaring
Xmodsquare = np.abs(Xmod_array)**2
Ymodsquare = np.abs(Ymod_array)**2

# Compute the magnitude using np.abs()
r_mod = np.abs(Xmodsquare + Ymodsquare)

'''
added by bruce

'''
# Number of data points
Nmod = Xmod.size

# Sample period
T = 50E-3 # [ms]

# Create a list of timestamps
x = np.linspace(0, Nmod*T, Nmod)

r_mod_fourier = scipy.fftpack.fft(r_mod)
xmodf = np.fft.fftfreq(Nmod, T)
ymodf = np.fft.fft(r_mod)

print(len(xmodf), len(ymodf))
fig1 = plt.figure()
plt.plot(x, r_mod, label='Mod(R)')
plt.xlim(x[0], x[-1])
plt.xlabel('Time (s)')
plt.ylabel('Intensity')
plt.title ('noise, modulating lock in amp')

fig2 = plt.figure()
plt.plot(xmodf, ymodf, label='FFT')
plt.xlim(0-(np.max(xmodf))*(0.01),np.max(xmodf)*(1.01))
plt.legend()
plt.ylabel('Intensity')
plt.xlabel('Frequency (Hz)')
plt.title ('FFT, modulating lock in amp')

# Convert lists to NumPy arrays
X2f_array = np.array(X2f)
Y2f_array = np.array(Y2f)

# Use NumPy element-wise squaring
X2fsquare = np.abs(X2f_array)**2
Y2fsquare = np.abs(Y2f_array)**2

# Compute the magnitude using np.abs()
r_2f = np.abs(X2fsquare + Y2fsquare)

'''
added by bruce

'''
# Number of data points
N2f = X2f.size
# Sample period
T = 100E-3 # [ms]

# Create a list of timestamps
x = np.linspace(0, N2f*T, N2f)

r_2f_fourier = scipy.fftpack.fft(r_2f)
x2ff = np.fft.fftfreq(N2f, T)
y2ff = np.fft.fft(r_2f)

print(len(x2ff), len(y2ff))
fig3 = plt.figure()
plt.plot(x, r_2f, label='2f(R)')
plt.xlim(x[0], x[-1])
plt.xlabel('Time (s)')
plt.ylabel('Intensity')
plt.title ('Noise, 2f lock in amp')

fig4 = plt.figure()
plt.plot(x2ff, y2ff, label='FFT')
plt.xlim(0-(np.max(x2ff))*(0.01),np.max(x2ff)*(1.01))
plt.xlabel('Frequency (Hz)')
plt.ylabel('Intensity')
plt.title ('FFT, 2f lock in amp')
plt.legend()

# Convert lists to NumPy arrays
Xdc_array = np.array(Xdc)
Ydc_array = np.array(Ydc)

# Use NumPy element-wise squaring
Xdcsquare = np.abs(Xdc_array)**2
Ydcsquare = np.abs(Ydc_array)**2

# Compute the magnitude using np.abs()
r_dc = np.abs(Xdcsquare + Ydcsquare)

'''
added by bruce

'''
# Number of data points
N = len(Xdc) 

# Sample period
T = 100E-3 # [ms]

# Create a list of timestamps
x = np.linspace(0, N*T, N)

r_dc_fourier = scipy.fftpack.fft(r_dc)
xdcf = np.fft.fftfreq(N, T)
ydcf = np.fft.fft(r_dc)

print(len(xdcf), len(ydcf))
fig5 = plt.figure()
plt.plot(x, r_dc, label='dc(R)')
plt.xlim(x[0], x[-1])
plt.xlabel('Time (s)')
plt.ylabel('Intensity')
plt.title ('noise, dc lock in amp')

fig6 = plt.figure()
plt.plot(xdcf, ydcf, label='FFT')
plt.xlim(0-(np.max(xdcf))*(0.01),np.max(xdcf)*(1.01))
plt.xlabel('Frequency (Hz)')
plt.ylabel('Intensity')
plt.title ('FFT, dc lock in amp')
plt.legend()

plt.show()
