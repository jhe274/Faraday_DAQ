import datetime as dt
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os
import scipy.fftpack

dir_path = os.path.join(os.getcwd(), 'Faraday rotation measurements')
K_vapor = os.path.join(dir_path, 'Data_acquisition')
lockin_path = os.path.join(K_vapor, 'FR_DAQ', 'FieldCrumley', 'Data', 'Lock-ins')
file = os.path.join(lockin_path, 'Faraday_lockins_2024-01-24_2.lvm')

def Lock_ins():
    '''
    Read lock-ins data files
    '''
    with open(file, 'r') as f:
        data = pd.read_csv(file, sep=',', header=None, skiprows=9,
                        names=['Timestamp', 'X_mod', 'Y_mod', 'X_2f', 'Y_2f', 'X_dc', 'Y_dc'])

        data['Timestamp'] = pd.to_datetime(data['Timestamp'])
        start_time = data['Timestamp'].iloc[0]
        data['Timestamp'] = (data['Timestamp'] - start_time).dt.total_seconds()

        Timestamps = data['Timestamp'].to_numpy()  # [s]
        Xdc = data['X_dc'].to_numpy()
        Ydc = data['Y_dc'].to_numpy()
        X2f = data['X_2f'].to_numpy()
        Y2f = data['Y_2f'].to_numpy()
        Xmod = data['X_mod'].to_numpy()
        Ymod = data['Y_mod'].to_numpy()

    return Timestamps, Xdc, Ydc, X2f, Y2f, Xmod, Ymod

Timestamps, Xdc, Ydc, X2f, Y2f, Xmod, Ymod = Lock_ins()

# Convert lists to NumPy arrays
Xmod_array = np.array(Xmod)
Ymod_array = np.array(Ymod)

# Use NumPy element-wise squaring
Xmodsquare = np.abs(Xmod_array)**2
Ymodsquare = np.abs(Ymod_array)**2

# Compute the magnitude using np.abs()
r_mod = np.abs(Xmodsquare + Ymodsquare)

# Number of data points
Nmod = Xmod.size

# Sample period
T = 5E-3  # [ms]

r_mod_fourier = scipy.fftpack.fft(r_mod)
xmodf = np.fft.fftfreq(Nmod, T)
ymodf = np.abs(np.fft.fft(r_mod))

fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 8))

ax1.plot(Timestamps, r_mod, label='Mod(R)')
ax1.set_xlim(Timestamps[0], Timestamps[-1])  # Use set_xlim instead of xlim
ax1.set_xlabel('Time (s)')
ax1.set_ylabel('Voltage (V)')
ax1.set_title('Noise, modulating lock in amp')

# Convert lists to NumPy arrays
X2f_array = np.array(X2f)
Y2f_array = np.array(Y2f)

# Use NumPy element-wise squaring
X2fsquare = np.abs(X2f_array)**2
Y2fsquare = np.abs(Y2f_array)**2

# Compute the magnitude using np.abs()
r_2f = np.abs(X2fsquare + Y2fsquare)

# Number of data points
N2f = X2f.size

r_2f_fourier = scipy.fftpack.fft(r_2f)
x2ff = np.fft.fftfreq(N2f, T)
y2ff = np.abs(np.fft.fft(r_2f))

print(len(x2ff), len(y2ff))
ax2.plot(Timestamps, r_2f, label='2f(R)')
ax2.set_xlim(Timestamps[0], Timestamps[-1])  # Use set_xlim instead of xlim
ax2.set_xlabel('Time (s)')
ax2.set_ylabel('Voltage (V)')
ax2.set_title('Noise, 2f lock in amp')

# Convert lists to NumPy arrays
Xdc_array = np.array(Xdc)
Ydc_array = np.array(Ydc)

# Use NumPy element-wise squaring
Xdcsquare = np.abs(Xdc_array)**2
Ydcsquare = np.abs(Ydc_array)**2

# Compute the magnitude using np.abs()
r_dc = np.abs(Xdcsquare + Ydcsquare)

# Number of data points
Ndc = Xdc.size

r_dc_fourier = scipy.fftpack.fft(r_dc)
xdcf = np.fft.fftfreq(Ndc, T)
ydcf = np.abs(np.fft.fft(r_dc))

print(len(xdcf), len(ydcf))

ax3.plot(Timestamps, r_dc, label='dc(R)')
ax3.set_xlim(Timestamps[0], Timestamps[-1])  # Use set_xlim instead of xlim
ax3.set_xlabel('Time (s)')
ax3.set_ylabel('Voltage (V)')
ax3.set_title('Noise, dc lock in amp')

plt.tight_layout()

fig, (ax4, ax5, ax6) = plt.subplots(3, 1, figsize=(10, 8))

ax4.plot(xmodf, ymodf)
ax4.set_xlim(0 - (np.max(xmodf)) * (0.01), np.max(xmodf) * (1.01))  # Use set_xlim instead of xlim
ax4.legend()
ax4.set_ylabel('Amplitude (arbitrary unit)')
ax4.set_xlabel('Frequency (Hz)')
ax4.set_title('FFT, modulating lock in amp')
ax4.set_xticks(np.arange(0, np.max(xmodf) * 1.01, 10))  # Set x-axis ticks

ax5.plot(x2ff, y2ff)
ax5.set_xlim(0 - (np.max(x2ff)) * (0.01), np.max(x2ff) * (1.01))  # Use set_xlim instead of xlim
ax5.set_xlabel('Frequency (Hz)')
ax5.set_ylabel('Amplitude (arbitrary unit)')
ax5.set_title('FFT, 2f lock in amp')
ax5.legend()
ax5.set_xticks(np.arange(0, np.max(x2ff) * 1.01, 10))  # Set x-axis ticks

ax6.plot(xdcf, ydcf)
ax6.set_xlim(0 - (np.max(xdcf)) * (0.01), np.max(xdcf) * (1.01))  # Use set_xlim instead of xlim
ax6.set_xlabel('Frequency (Hz)')
ax6.set_ylabel('Amplitude (arbitrary unit)')
ax6.set_title('FFT, dc lock in amp')
ax6.legend()
ax6.set_xticks(np.arange(0, np.max(xdcf) * 1.01, 10))  # Set x-axis ticks

plt.tight_layout()

plt.show()
