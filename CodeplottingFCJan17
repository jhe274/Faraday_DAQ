from scipy.fft import fft, fftfreq
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os

dir_path = os.path.join(os.getcwd(), 'Faraday rotation measurements')
K_vapor = os.path.join(dir_path, 'K vapor cell')
lockin_path = os.path.join(K_vapor, 'Lock-ins data')
file = os.path.join(lockin_path, 'Lock-ins_log.lvm')

def Lock_ins():
    '''
        Read lock-ins data files
    '''
    with open(file, 'r') as f:
        data = pd.read_csv(file, sep=',', header=None, skiprows=2,
                        names=['X_dc', 'Y_dc', 'X_2f', 'Y_2f', 'X_mod', 'Y_mod'])

    Xdc = data['X_dc'].to_numpy()
    Ydc = data['Y_dc'].to_numpy()
    X2f = data['X_2f'].to_numpy()
    Y2f = data['Y_2f'].to_numpy()
    Xmod = data['X_mod'].to_numpy()
    Ymod = data['Y_mod'].to_numpy()

    return Xdc, Ydc, X2f, Y2f, Xmod, Ymod

Xdc, Ydc, X2f, Y2f, Xmod, Ymod = Lock_ins()

# Convert lists to NumPy arrays
Xmod_array = np.array(Xmod)
Ymod_array = np.array(Ymod)

rfX_mod = fft(Xmod_array)
rfY_mod = fft(Ymod_array)

# Use NumPy element-wise squaring
Xmodsquare = np.abs(rfX_mod)**2
Ymodsquare = np.abs(rfY_mod)**2

# Compute the magnitude using np.abs()
r_mod = np.abs(Xmodsquare + Ymodsquare)

# Calculate frequency values using fftfreq
N = len(Xmod)  # Number of data points
time_values = np.arange(0, N * 50E-3, 50E-3)
frequency_values = fftfreq(N, d=time_values[1] - time_values[0])

###########################
# Convert lists to NumPy arrays
X2f_array = np.array(X2f)
Y2f_array = np.array(Y2f)

rfX_2f = fft(X2f_array)
rfY_2f = fft(Y2f_array)

# Use NumPy element-wise squaring
X2fsquare = np.abs(rfX_2f)**2
Y2fsquare = np.abs(rfY_2f)**2

# Compute the magnitude using np.abs()
r_2f = np.abs(X2fsquare + Y2fsquare)

##########################

# Convert lists to NumPy arrays
Xdc_array = np.array(Xdc)
Ydc_array = np.array(Ydc)

# Perform FFT on Xdc and Ydc
rfX_dc = fft(Xdc_array)
rfY_dc = fft(Ydc_array)

# Use NumPy element-wise squaring
Xdcsquare = np.abs(rfX_dc)**2
Ydcsquare = np.abs(rfY_dc)**2

# Compute the magnitude using np.abs() for dc
r_dc = np.abs(Xdcsquare + Ydcsquare)

# Plot the result
plt.plot(frequency_values, r_mod, label='mod')
plt.plot(frequency_values, r_dc, label='dc')
plt.plot(frequency_values, r_2f, label='2f')
plt.xlabel('Frequency (Hz)')
plt.ylabel('Magnitude (V)')
plt.legend(loc='best')
plt.xlim(0,max(frequency_values)*1.05)
plt.show()
